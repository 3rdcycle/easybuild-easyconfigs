Replace unsupported macros with expanded code

The preprocessor in foss doesn't handle macros with stringification using #
which occurs GIPAW's xml_routines.

Author: Lars Viklund (HPC2N, Umea University)

diff -ru qe-gipaw-7.0.orig/src/xml_routines.f90 qe-gipaw-7.0/src/xml_routines.f90
--- qe-gipaw-7.0.orig/src/xml_routines.f90	2022-01-13 13:48:03.000000000 +0000
+++ qe-gipaw-7.0/src/xml_routines.f90	2022-01-24 09:56:30.414934470 +0000
@@ -93,25 +93,25 @@
     timestamp = 'This run was terminated on:  ' // ctime // ' ' // cdate(1:2) // ' '//cdate(3:5) // ' '// cdate (6:9)
 
     CHECK_IONODE
-    _NE(general_info)
-      _NE(xml_format)
-        _ATTR(NAME, fmt_name)
-        _ATTR(VERSION, fmt_version)
+    call XML_NewElement(xmlf, "general_info")
+      call XML_NewElement(xmlf, "xml_format")
+        call XML_AddAttribute(xmlf, "NAME", (fmt_name))
+        call XML_AddAttribute(xmlf, "VERSION", (fmt_version))
         _ADDV(fmt_name//'_'//fmt_version)
-      _EE(xml_format)
-      _NE(creator)
-        _ATTR(NAME, 'GIPAW')
-        _ATTR(VERSION, gipaw_git_revision)
+      call XML_EndElement(xmlf, "xml_format")
+      call XML_NewElement(xmlf, "creator")
+        call XML_AddAttribute(xmlf, "NAME", ('GIPAW'))
+        call XML_AddAttribute(xmlf, "VERSION", (gipaw_git_revision))
         _ADDV('XML file generated by GIPAW')
-      _EE(creator)
-      _NE(created)
-        _ATTR(DATE, cdate)
-        _ATTR(TIME, ctime)
+      call XML_EndElement(xmlf, "creator")
+      call XML_NewElement(xmlf, "created")
+        call XML_AddAttribute(xmlf, "DATE", (cdate))
+        call XML_AddAttribute(xmlf, "TIME", (ctime))
         _ADDS(timestamp)
-      _EE(created)
-      _NE(job)
-      _EE(job)
-    _EE(general_info)
+      call XML_EndElement(xmlf, "created")
+      call XML_NewElement(xmlf, "job")
+      call XML_EndElement(xmlf, "job")
+    call XML_EndElement(xmlf, "general_info")
 
   END SUBROUTINE xml_output_generalinfo
 
@@ -131,20 +131,26 @@
 #endif      
 
     CHECK_IONODE
-    _NE(parallel_info)
-      _NE(nprocs)
+    call XML_NewElement(xmlf, "parallel_info")
+      call XML_NewElement(xmlf, "nprocs")
         _ADDV(nproc)
-      _EE(nprocs)
-      _OUTV(nthreads)
-      _NE(ntasks)
+      call XML_EndElement(xmlf, "nprocs")
+      call XML_NewElement(xmlf, "nthreads")
+        call XML_AddCharacters(xmlf, (nthreads))
+      call XML_EndElement(xmlf, "nthreads")
+      call XML_NewElement(xmlf, "ntasks")
         _ADDV(ntask_groups)
-      _EE(ntasks)
-      _OUTV(nbgrp)
-      _OUTV(npool)
-      _NE(ndiag)
+      call XML_EndElement(xmlf, "ntasks")
+      call XML_NewElement(xmlf, "nbgrp")
+        call XML_AddCharacters(xmlf, (nbgrp))
+      call XML_EndElement(xmlf, "nbgrp")
+      call XML_NewElement(xmlf, "npool")
+        call XML_AddCharacters(xmlf, (npool))
+      call XML_EndElement(xmlf, "npool")
+      call XML_NewElement(xmlf, "ndiag")
         _ADDV(nproc_ortho)
-      _EE(ndiag)
-    _EE(parallel_info)
+      call XML_EndElement(xmlf, "ndiag")
+    call XML_EndElement(xmlf, "parallel_info")
 
   END SUBROUTINE xml_output_parallelinfo
 
@@ -160,42 +166,78 @@
     implicit none
 
     CHECK_IONODE
-    _NE(input)
-      _OUTS(job)
-      _OUTS(prefix)
-      _OUTS(tmp_dir)
-      _OUTV(conv_threshold)
-      _OUTS(restart_mode)
-      _NE(q_gipaw)
+    call XML_NewElement(xmlf, "input")
+      call XML_NewElement(xmlf, "job")
+        call XML_AddCharacters(xmlf, trim((job)))
+      call XML_EndElement(xmlf, "job")
+      call XML_NewElement(xmlf, "prefix")
+      call XML_AddCharacters(xmlf, trim((prefix)))
+      call XML_EndElement(xmlf, "prefix")
+      call XML_NewElement(xmlf, "tmp_dir")
+      call XML_AddCharacters(xmlf, trim((tmp_dir)))
+      call XML_EndElement(xmlf, "tmp_dir")
+      call XML_NewElement(xmlf, "conv_threshold")
+        call XML_AddCharacters(xmlf, (conv_threshold))
+      call XML_EndElement(xmlf, "conv_threshold")
+      call XML_NewElement(xmlf, "restart_mode")
+        call XML_AddCharacters(xmlf, trim((restart_mode)))
+      call XML_EndElement(xmlf, "restart_mode")
+      call XML_NewElement(xmlf, "q_gipaw")
         _ADDV(q_gipaw*tpiba)
-      _EE(q_gipaw)
-      _OUTS(verbosity)
-      _OUTS(filcurr)
-      _OUTS(filfield)
-      _OUTS(filnics)
-      _OUTV(pawproj)
-      _OUTV(use_nmr_macroscopic_shape)
-      _NE(nmr_macroscopic_shape)
-        _ATTR(rank, "2")
-        _ATTR(dims, "3 3")
+      call XML_EndElement(xmlf, "q_gipaw")
+      call XML_NewElement(xmlf, "verbosity")
+        call XML_AddCharacters(xmlf, trim((verbosity)))
+      call XML_EndElement(xmlf, "verbosity")
+      call XML_NewElement(xmlf, "filcurr")
+        call XML_AddCharacters(xmlf, trim((filcurr)))
+      call XML_EndElement(xmlf, "filcurr")
+      call XML_NewElement(xmlf, "filfield")
+        call XML_AddCharacters(xmlf, trim((filfield)))
+      call XML_EndElement(xmlf, "filfield")
+      call XML_NewElement(xmlf, "filnics")
+        call XML_AddCharacters(xmlf, trim((filnics)))
+      call XML_EndElement(xmlf, "filnics")
+      call XML_NewElement(xmlf, "pawproj")
+        call XML_AddCharacters(xmlf, (pawproj))
+      call XML_EndElement(xmlf, "pawproj")
+      call XML_NewElement(xmlf, "use_nmr_macroscopic_shape")
+        call XML_AddCharacters(xmlf, (use_nmr_macroscopic_shape))
+      call XML_EndElement(xmlf, "use_nmr_macroscopic_shape")
+      call XML_NewElement(xmlf, "nmr_macroscopic_shape")
+        call XML_AddAttribute(xmlf, "rank", ("2"))
+        call XML_AddAttribute(xmlf, "dims", ("3 3"))
         _ADDV(nmr_macroscopic_shape)
-      _EE(nmr_macroscopic_shape)
-      _OUTV(spline_ps)
-      _OUTS(diagonalization)
-      _NE(q_efg)
-        _ATTR(size, nat)
+      call XML_EndElement(xmlf, "nmr_macroscopic_shape")
+      call XML_NewElement(xmlf, "spline_ps")
+        call XML_AddCharacters(xmlf, (spline_ps))
+      call XML_EndElement(xmlf, "spline_ps")
+      call XML_NewElement(xmlf, "diagonalization")
+        call XML_AddCharacters(xmlf, trim((diagonalization)))
+      call XML_EndElement(xmlf, "diagonalization")
+      call XML_NewElement(xmlf, "q_efg")
+        call XML_AddAttribute(xmlf, "size", (nat))
         _ADDV(q_efg)
-      _EE(q_efg)
-      _OUTV(max_seconds)
-      _OUTV(r_rand)
-      _OUTS(hfi_output_unit)
-      _NE(hfi_nuclear_g_factor)
-        _ATTR(size, nat)
+      call XML_EndElement(xmlf, "q_efg")
+      call XML_NewElement(xmlf, "max_seconds")
+        call XML_AddCharacters(xmlf, (max_seconds))
+      call XML_EndElement(xmlf, "max_seconds")
+      call XML_NewElement(xmlf, "r_rand")
+        call XML_AddCharacters(xmlf, (r_rand))
+      call XML_EndElement(xmlf, "r_rand")
+      call XML_NewElement(xmlf, "hfi_output_unit")
+        call XML_AddCharacters(xmlf, trim((hfi_output_unit)))
+      call XML_EndElement(xmlf, "hfi_output_unit")
+      call XML_NewElement(xmlf, "hfi_nuclear_g_factor")
+        call XML_AddAttribute(xmlf, "size", (nat))
         _ADDV(hfi_nuclear_g_factor)
-      _EE(hfi_nuclear_g_factor)
-      _OUTV(core_relax_method)
-      _OUTV(hfi_via_reconstruction_only)
-    _EE(input)
+      call XML_EndElement(xmlf, "hfi_nuclear_g_factor")
+      call XML_NewElement(xmlf, "core_relax_method")
+        call XML_AddCharacters(xmlf, (core_relax_method))
+      call XML_EndElement(xmlf, "core_relax_method")
+      call XML_NewElement(xmlf, "hfi_via_reconstruction_only")
+        call XML_AddCharacters(xmlf, (hfi_via_reconstruction_only))
+      call XML_EndElement(xmlf, "hfi_via_reconstruction_only")
+    call XML_EndElement(xmlf, "input")
   END SUBROUTINE xml_output_namelist
 
 
@@ -207,17 +249,17 @@
 
     CHECK_IONODE
 
-    _NE(susceptibility_low)
-      _ATTR(rank, '2')
-      _ATTR(dims, '3 3')
+    call XML_NewElement(xmlf, "susceptibility_low")
+      call XML_AddAttribute(xmlf, "rank", ('2'))
+      call XML_AddAttribute(xmlf, "dims", ('3 3'))
       _ADDV(res_suscept1)
-    _EE(susceptibility_low)
+    call XML_EndElement(xmlf, "susceptibility_low")
 
-    _NE(susceptibility_high)
-      _ATTR(rank, '2')
-      _ATTR(dims, '3 3')
+    call XML_NewElement(xmlf, "susceptibility_high")
+      call XML_AddAttribute(xmlf, "rank", ('2'))
+      call XML_AddAttribute(xmlf, "dims", ('3 3'))
       _ADDV(res_suscept2)
-    _EE(susceptibility_high)
+    call XML_EndElement(xmlf, "susceptibility_high")
 
   END SUBROUTINE xml_output_susceptibility
 
@@ -231,12 +273,12 @@
     integer, intent(in) :: na
     character(*) :: rank, dims, units
 
-    _ATTR(name, trim(atm(ityp(na))))
-    _ATTR(tau, tau(:,na))
-    _ATTR(index, na)
-    _ATTR(rank, rank)
-    _ATTR(dims, dims)
-    _ATTR(units, units)
+    call XML_AddAttribute(xmlf, "name", (trim(atm(ityp(na)))))
+    call XML_AddAttribute(xmlf, "tau", (tau(:,na)))
+    call XML_AddAttribute(xmlf, "index", (na))
+    call XML_AddAttribute(xmlf, "rank", (rank))
+    call XML_AddAttribute(xmlf, "dims", (dims))
+    call XML_AddAttribute(xmlf, "units", (units))
 
   END SUBROUTINE xml_atom_attributes
 
@@ -251,65 +293,65 @@
     integer :: na
 
     CHECK_IONODE
-    _NE(output)
+    call XML_NewElement(xmlf, "output")
 
 !!    if (job == 'nmr') then
       call xml_output_susceptibility
-      _NE(shielding_tensors)
+      call XML_NewElement(xmlf, "shielding_tensors")
       do na = 1, nat
-        _NE(atom)
+        call XML_NewElement(xmlf, "atom")
           call xml_atom_attributes(na, 'ppm', '2', '3 3')
           _ADDV(res_nmr_sigma(:,:,na))
-        _EE(atom)
+        call XML_EndElement(xmlf, "atom")
       enddo
-      _EE(shielding_tensors)
+      call XML_EndElement(xmlf, "shielding_tensors")
 !!    endif
 
 !!    if (job == 'g_tensor') then
 !!      call xml_output_susceptibility
-      _NE(delta_g)
-        _ATTR(rank, '2')
-        _ATTR(dims, '3 3')
+      call XML_NewElement(xmlf, "delta_g")
+        call XML_AddAttribute(xmlf, "rank", ('2'))
+        call XML_AddAttribute(xmlf, "dims", ('3 3'))
         _ADDV(res_epr_deltag)
-      _EE(delta_g)
-      _NE(delta_g_paratec)
-        _ATTR(rank, '2')
-        _ATTR(dims, '3 3')
+      call XML_EndElement(xmlf, "delta_g")
+      call XML_NewElement(xmlf, "delta_g_paratec")
+        call XML_AddAttribute(xmlf, "rank", ('2'))
+        call XML_AddAttribute(xmlf, "dims", ('3 3'))
         _ADDV(res_epr_deltag_paratec)
-      _EE(delta_g_paratec)
+      call XML_EndElement(xmlf, "delta_g_paratec")
 !!    endif
 
 !!    if (job == 'efg') then
-      _NE(electric_field_gradients)
+      call XML_NewElement(xmlf, "electric_field_gradients")
         do na = 1, nat
-          _NE(atom)
+          call XML_NewElement(xmlf, "atom")
             call xml_atom_attributes(na, 'MHz', '2', '3 3')
             _ADDV(res_efg(:,:,na))
-          _EE(atom)
+          call XML_EndElement(xmlf, "atom")
         enddo
-        _EE(electric_field_gradients)
+        call XML_EndElement(xmlf, "electric_field_gradients")
 !!    endif
 
 !!    if (job == 'hyperfine') then
-      _NE(hyperfine_dipolar)
+      call XML_NewElement(xmlf, "hyperfine_dipolar")
       do na = 1, nat
-        _NE(atom)
+        call XML_NewElement(xmlf, "atom")
           call xml_atom_attributes(na, trim(hfi_output_unit), '2', '3 3')
           _ADDV(res_hfi_dip(:,:,na))
-        _EE(atom)
+        call XML_EndElement(xmlf, "atom")
       enddo
-      _EE(hyperfine_dipolar)
-      _NE(hyperfine_fermi_contact)
+      call XML_EndElement(xmlf, "hyperfine_dipolar")
+      call XML_NewElement(xmlf, "hyperfine_fermi_contact")
       do na = 1, nat
-        _NE(atom)
+        call XML_NewElement(xmlf, "atom")
           call xml_atom_attributes(na, trim(hfi_output_unit), '1', '1')
           _ADDV(res_hfi_fc(na))
-        _EE(atom)
+        call XML_EndElement(xmlf, "atom")
       enddo
-      _EE(hyperfine_fermi_contact)
+      call XML_EndElement(xmlf, "hyperfine_fermi_contact")
 !!    endif
 
-    _EE(output)
+    call XML_EndElement(xmlf, "output")
 
   END SUBROUTINE xml_output_results
 
@@ -321,7 +363,9 @@
     integer :: exit_status = 0
 
     CHECK_IONODE
-    _OUTV(exit_status)
+    call XML_NewElement(xmlf, "exit_status")
+      call XML_AddCharacters(xmlf, (exit_status))
+    call XML_EndElement(xmlf, "exit_status")
 
   END SUBROUTINE xml_output_status
 
@@ -334,10 +378,10 @@
 
     CHECK_IONODE
     call date_and_tim(cdate, ctime)
-    _NE(closed)
-       _ATTR(DATE, cdate)
-       _ATTR(TIME, ctime)
-    _EE(closed)
+    call XML_NewElement(xmlf, "closed")
+       call XML_AddAttribute(xmlf, "DATE", (cdate))
+       call XML_AddAttribute(xmlf, "TIME", (ctime))
+    call XML_EndElement(xmlf, "closed")
 
   END SUBROUTINE xml_output_closed
 
@@ -352,17 +396,21 @@
     real(dp) :: wall, cpu
 
     CHECK_IONODE
-    _NE(timing_info)
-      _NE(total)
-        _ATTR(label, 'GIPAW')
+    call XML_NewElement(xmlf, "timing_info")
+      call XML_NewElement(xmlf, "total")
+        call XML_AddAttribute(xmlf, "label", ('GIPAW'))
         cpu = f_tcpu()
         wall = f_wall()
         !wall = get_clock('GIPAW')
-        _OUTV(cpu)
-        _OUTV(wall)
-      _EE(total)
+        call XML_NewElement(xmlf, "cpu")
+          call XML_AddCharacters(xmlf, (cpu))
+        call XML_EndElement(xmlf, "cpu")
+        call XML_NewElement(xmlf, "wall")
+          call XML_AddCharacters(xmlf, (wall))
+        call XML_EndElement(xmlf, "wall")
+      call XML_EndElement(xmlf, "total")
 
-    _EE(timing_info)
+    call XML_EndElement(xmlf, "timing_info")
 
   END SUBROUTINE xml_output_timinginfo
 
