easyblock = "Bundle"

name = "bigdft-suite"
version = "1.9.1"
local_version = "1.9.1"

homepage = "https://gitlab.com/l_sim/bigdft-suite"
description = """
BigDFT: electronic structure calculation based on Daubechies wavelets.
bigdft-suite is a set of different packages to run bigdft.
"""

toolchain = {"name": "foss", "version": "2021b"}
toolchainopts = {
    "usempi": True,
    "extra_fflags": "-fallow-argument-mismatch",
    "extra_fcflags": "-fallow-argument-mismatch",
    "extra_f90flags": "-fallow-argument-mismatch -lgain",
}

default_easyblock = "ConfigureMake"
default_component_specs = {
    "source_urls": [
        "https://gitlab.com/l_sim/bigdft-suite/-/archive/%s/" % local_version
    ],
    "sources": ["bigdft-suite-%s.tar.gz" % local_version],
    "start_dir": "bigdft-suite-%s" % local_version,
}


local_configopts = """CC=\\"$MPICC\\" FC=\\" $MPIFC \\" \
--enable-mpi \
\
FCFLAGS=\\"$CPPFLAGS -fallow-argument-mismatch -I%(installdir)s/include \
-I$EBROOTSCALAPACK/include $FCFLAGS -std=legacy \\" \
\
FFLAGS=\\"$CPPFLAGS -fallow-argument-mismatch -I%(installdir)s/include \
-I$EBROOTSCALAPACK/include $FFLAGS -std=legacy \\" \
\
F90FLAGS=\\"$CPPFLAGS -fallow-argument-mismatch -I%(installdir)s/include \
-I$EBROOTSCALAPACK/include $F90FLAGS -std=legacy \\" \
\
--with-ext-linalg=\\"-L$SCALAPACK_LIB_DIR $LIBSCALAPACK -L$LAPACK_LIB_DIR $LIBBLAS \\" \
--with-yaml-path=\\"$EBROOTLIBYAML\\" """


local_preinstallopts = (
    "export CPATH=%(installdir)s/include/futile:%(installdir)s/include/:$CPATH && "
)
local_preinstallopts += "export LIBRARY_PATH=%(installdir)s/lib:$LIBRARY_PATH && "
local_preinstallopts += (
    "export PKG_CONFIG_PATH=%(installdir)s/lib/pkgconfig:$PKG_CONFIG_PATH && "
)
local_preinstallopts += (
    "export LD_LIBRARY_PATH=%(builddir)s/easybuild_obj:$LD_LIBRARY_PATH && "
)
local_preinstallopts += "export LD_LIBRARY_PATH=%(installdir)s/lib:$LD_LIBRARY_PATH && "
local_preinstallopts += (
    "export FUTILE_DYNLIB_FLAG=%(installdir)s/lib:$FUTILE_DYNLIB_FLAG && "
)
local_preinstallopts += (
    "export FUTILE_DYNLIB_FLAG=%(installdir)s/lib:$FUTILE_DYNLIB_FLAG && "
)
local_preinstallopts += (
    "export ac_use_libxc=yes && export LIBXC_INCLUDE=$EBROOTLIBXC/include && "
)
local_preinstallopts += "mkdir bigdft_builddir && cd bigdft_builddir && "

local_preinstallopts += (
    "unset LIBS && python3 ../Installer.py build bigdft -y -v -c %s && "
    % local_configopts
)

local_preinstall = (
    """
    mkdir bigdft_builddir && \
    cd bigdft_builddir && \
    python3 ../Installer.py build bigdft -y -v -c %s && """
    % local_configopts
)

components = [
    (
        name,
        version,
        {
            # "patches": ["bigdft_remove_dep_lgain.patch"],bigdft_suite_index_bug
            "patches": ["bigdft_suite_index_bug.patch"],
            "skipsteps": ["configure", "build"],
            # "preinstallopts": local_preinstallopts,
            "preinstallopts": local_preinstall,
            "install_cmd": "rsync -rv %(builddir)s/bigdft-suite-1.9.1/bigdft_builddir/install/ %(installdir)s",
        },
    ),
]

builddependencies = [
    ("CMake", "3.21.1"),
]

dependencies = [
    ("Autoconf", "2.71"),
    ("Python", "3.9.6"),
    ("OpenCV", "4.5.5", "-contrib"),
    ("XZ", "5.2.5"),
]
modextrapaths = {"PYTHONPATH": ["lib/python%(pyshortver)s/site-packages"]}
modextrapaths = {"PYTHONPATH": ["lib/python%(pyshortver)s/site-packages"]}

sanity_check_paths = {
    "files": [
        "include/futile.mod",
        "include/futile.h",
        "bin/bigdft",
        "bin/bigdftvars.sh",
    ]
    + [("lib/python3.9/site-packages/BigDFT/Systems.py", "lib64/libbigdft-1.a")],
    "dirs": [],
}

local_test_script = """
from BigDFT.Systems import System
from BigDFT.Fragments import Fragment
from BigDFT.IO import XYZReader
N2 = System()
with XYZReader("N2") as ifile:
    N2["N:0"] = Fragment([next(ifile)])
    N2["N:1"] = Fragment([next(ifile)])
print(N2.get_posinp())
"""

local_cmd = (
    "echo '"
    + local_test_script
    + "' > "
    + "%(installdir)s/bigdft_test.py && python %(installdir)s/bigdft_test.py && rm %(installdir)s/bigdft_test.py "
)

sanity_check_commands = [(local_cmd)]


moduleclass = "phys"
